rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /accounts/{accountId} {
      allow read: if isAdmin() || canReadAccountEnterprise() || canReadAccountVendor();
      allow create: if isAdmin() || canCreateAccountEnterprise(accountId);
      allow delete: if isAdmin() || canDeleteAccountEnterprise();
      allow update: if isAdmin() || canUpdateAccountEnterprise() || canUpdateAccountVendor();
    }
    match /indices/{enterpriseId} {
      allow read, write: if isAdmin();
    }
    match /indices/{enterpriseId}/accountIndices/{accountIndex} {
      allow read: if isAdmin() || canReadAccountIndexEnterprise();
      allow create: if isAdmin() || canCreateAccountIndexEnterprise(accountIndex);
      allow delete: if isAdmin() || canDeleteAccountIndexEnterprise();
      allow update: if isAdmin();
    }
    match /enterpriseUserGroups/{enterpriseId} {
      allow read: if isAdmin() || canReadEnterpriseGroup(enterpriseId);
      allow create, delete: if isAdmin();
      allow update: if isAdmin() || canUpdateEnterpriseGroup(enterpriseId);
    }
    match /enterpriseUserGroups/{enterpriseId}/users/{authUserId} {
      allow read: if isAdmin() || canReadEnterpriseUser(enterpriseId, authUserId);
      allow create: if isAdmin() || canCreateEnterpriseUser(enterpriseId);
      allow update: if isAdmin() || canUpdateEnterpriseUser(enterpriseId, authUserId);
      allow delete: if isAdmin() || canDeleteEnterpriseUser(enterpriseId, authUserId);
    }
    match /vendorUserGroups/{vendorId} {
      allow read: if isAdmin() || canReadVendorGroup(vendorId);
      allow create, delete: if isAdmin();
      allow update: if isAdmin() || canUpdateVendorGroup(vendorId);
    }
    match /vendorUserGroups/{vendorId}/users/{authUserId} {
      allow read: if isAdmin() || canReadVendorUser(vendorId, authUserId);
      allow create: if isAdmin() || canCreateVendorUser(vendorId);
      allow update: if isAdmin() || canUpdateVendorUser(vendorId, authUserId);
      allow delete: if isAdmin() || canDeleteVendorUser(vendorId, authUserId);
    }
    match /configs/{configId} {
      allow read;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // account.rules //
    function isNewAccount() {
      let reqData = requestData();
      return hasAll(['id',
          'enterpriseId',
          'enterpriseName',
          'enterpriseEmails',
          'vendorName',
          'vendorEmail',
          'amount',
          'currency',
          'originalDueDate',
          'newPayDate',
          'payDate',
          'status',
          'statusNumber',
          'searchMap',
          'index',
          'createdAt',
          'lastEditedAt']) &&
        hasOnly(['id',
          'enterpriseId',
          'enterpriseName',
          'enterpriseEmails',
          'vendorName',
          'vendorEmail',
          'amount',
          'currency',
          'originalDueDate',
          'newPayDate',
          'payDate',
          'status',
          'statusNumber',
          'searchMap',
          'index',
          'userConfiguredId',
          'createdAt',
          'lastEditedAt']) &&
        reqData.id is string &&
        reqData.enterpriseId is string &&
        reqData.enterpriseName is string &&
        reqData.enterpriseEmails is list &&
        reqData.amount is number &&
        reqData.currency in ['jpy', 'usd', 'eur'] &&
        reqData.originalDueDate is timestamp && reqData.originalDueDate > request.time &&
        reqData.newPayDate is timestamp && reqData.newPayDate > request.time &&
        reqData.originalDueDate > reqData.newPayDate &&
        reqData.payDate is timestamp && reqData.payDate == reqData.originalDueDate &&
        reqData.status in ['inactive', 'active', 'adjusted', 'paid', 'confirmed', 'expired'] &&
        reqData.statusNumber is number &&
        reqData.searchMap is map &&
        reqData.index is string &&
        reqData.createdAt is timestamp &&
        reqData.lastEditedAt is timestamp &&
        (!hasAll(['userConfiguredId']) || reqData.userConfiguredId is string);
    }
    function canCreateAccountEnterprise(accountId) {
      let reqData = requestData();
      let isValidStatus = reqData.status == 'inactive';
      let isUnique = getAfter(
        /databases/$(database)/documents/indices/$(reqData.enterpriseId)/accountIndices/$(reqData.index)
      ).data.accountId == accountId;
      return isValidStatus &&
        isNewAccount() &&
        isUnique &&
        reqData.id == accountId;
    }
    function canDeleteAccountEnterprise() {
      let data = resourceData();
      let isValidStatus = data.status == 'inactive' || data.status == 'expired';
      let isIndexDeleted = !existsAfter(
        /databases/$(database)/documents/indices/$(data.enterpriseId)/accountIndices/$(data.index)
      );
      return isValidStatus &&
        canReadAccountEnterprise() &&
        isIndexDeleted;
    }
    function canUpdateAccountEnterprise() {
      let data = resourceData();
      let reqData = requestData();
      let isValidAdjust = data.status == 'active' &&
        reqData.status == 'adjusted' &&
        hasOnlyDiff(['status', 'adjustedAt', 'lastEditedAt']) &&
        reqData.adjustedAt is timestamp &&
        reqData.lastEditedAt is timestamp &&
        customClaimIsEnterpriseAdmin();
      let isValidSetAsPaid = data.status == 'adjusted' &&
        reqData.status == 'paid' &&
        hasOnlyDiff(['status', 'paidAt', 'lastEditedAt']) &&
        reqData.paidAt is timestamp &&
        reqData.lastEditedAt is timestamp;
      return (isValidAdjust || isValidSetAsPaid) && canReadAccountEnterprise();
    }
    function canUpdateAccountVendor() {
      let data = resourceData();
      let reqData = requestData();
      let isValidActivate = data.status == 'inactive' &&
        reqData.status == 'active' &&
        reqData.vendorId == customClaimVendorId() &&
        hasOnlyDiff(['vendorId', 'status', 'activatedAt', 'lastEditedAt']) &&
        reqData.activatedAt is timestamp &&
        reqData.lastEditedAt is timestamp &&
        customClaimIsVendorAdmin();
      let isValidConfirm = (data.status == 'adjusted' || data.status == 'paid') &&
        reqData.status == 'confirmed' &&
        hasOnlyDiff(['status', 'confirmedAt', 'lastEditedAt']) &&
        reqData.confirmedAt is timestamp &&
        reqData.lastEditedAt is timestamp;
      return (isValidActivate || isValidConfirm) && canReadAccountVendor();
    }
    function canReadAccountEnterprise() {
      let data = resourceData();
      return equalToCustomClaimEnterpriseId(data.enterpriseId);
    }
    function canReadAccountVendor() {
      let data = resourceData();
      return containedInCustomClaimVendorEmails(data.vendorEmail) ||
        equalToCustomClaimVendorId(data.vendorId);
    }

    // accountIndex.rules //
    function isAccountIndex() {
      let reqData = requestData();
      return hasAll([
        'id',
        'accountId',
        'enterpriseId',
        'createdAt',
        'lastEditedAt'
      ]) && hasOnly([
        'id',
        'accountId',
        'enterpriseId',
        'createdAt',
        'lastEditedAt'
      ]) &&
      reqData.id is string &&
      reqData.accountId is string &&
      reqData.enterpriseId is string &&
      reqData.createdAt is timestamp &&
      reqData.lastEditedAt is timestamp;
    }
    function canCreateAccountIndexEnterprise(accountIndex) {
      let reqData = requestData();
      let isUnique = getAfter(
        /databases/$(database)/documents/accounts/$(reqData.accountId)
      ).data.index == accountIndex;
      return isAccountIndex() &&
        isUnique &&
        reqData.id == accountIndex;
    }
    function canDeleteAccountIndexEnterprise() {
      let data = resourceData();
      let isAccountDeleted = !existsAfter(
        /databases/$(database)/documents/accounts/$(data.accountId)
      );
      return isAccountDeleted && canReadAccountIndexEnterprise();
    }
    function canReadAccountIndexEnterprise() {
      let data = resourceData();
      return resource == null ||
        customClaimEnterpriseId() == data.enterpriseId;
    }

    // enterpriseUser.rules //
    function canReadEnterpriseGroup(enterpriseId) {
      return enterpriseId == customClaimEnterpriseId();
    }
    function canUpdateEnterpriseGroup(enterpriseId) {
      let reqData = requestData();
      return 
      hasOnlyDiff(['name', 'lastEditedAt']) &&
        (!hasAll(['name']) || reqData.name is string) &&
        reqData.lastEditedAt is timestamp &&
        canReadEnterpriseGroup(enterpriseId) &&
        customClaimIsEnterpriseAdmin();
    }
    function canReadEnterpriseUser(enterpriseId, authUserId) {
      return customClaimIsEnterpriseAdmin() ||
        (canReadEnterpriseGroup(enterpriseId) && authUserId == authUid());
    }
    function canCreateEnterpriseUser(enterpriseId) {
      let reqData = requestData();
      return hasAll([
          'id',
          'email',
          'isGroupAdmin',
          'role',
          'createdAt',
          'lastEditedAt']) &&
        hasOnly([
          'id',
          'email',
          'isGroupAdmin',
          'role',
          'createdAt',
          'lastEditedAt']) &&
        reqData.id is string &&
        reqData.email is string &&
        reqData.isGroupAdmin is bool &&
        reqData.role is list &&
        reqData.createdAt is timestamp &&
        reqData.lastEditedAt is timestamp &&
        canReadEnterpriseGroup(enterpriseId) &&
        customClaimIsEnterpriseAdmin();
    }
    function canUpdateEnterpriseUser(enterpriseId, authUserId) {
      let reqData = requestData();
      return (
          (authUid() == authUserId &&
            hasOnlyDiff(['role', 'lastEditedAt'])) ||
          (authUid() != authUserId &&
            hasOnlyDiff(['role', 'lastEditedAt', 'isGroupAdmin']))
        ) &&
        (!hasAll(['role']) || reqData.role is list) &&
        (!hasAll(['isGroupAdmin']) || reqData.isGroupAdmin is bool) &&
        canReadEnterpriseGroup(enterpriseId) &&
        customClaimIsEnterpriseAdmin();
    }
    function canDeleteEnterpriseUser(enterpriseId, authUserId) {
      return enterpriseId == customClaimEnterpriseId() &&
        customClaimIsEnterpriseAdmin() &&
        authUserId != authUid();
    }

    // vendorUser.rules //
    function canReadVendorGroup(vendorId) {
      return vendorId == customClaimVendorId();
    }
    function canUpdateVendorGroup(vendorId) {
      let reqData = requestData();
      return hasOnlyDiff(['name', 'lastEditedAt']) &&
        (!hasAll(['name']) || reqData.name is string) &&
        reqData.lastEditedAt is timestamp &&
        canReadVendorGroup(vendorId) &&
        customClaimIsVendorAdmin();
    }
    function canReadVendorUser(vendorId, authUserId) {
      return customClaimIsVendorAdmin() ||
        (canReadVendorGroup(vendorId) && authUserId == authUid());
    }
    function canCreateVendorUser(vendorId) {
      let reqData = requestData();
      return hasAll([
          'id',
          'email',
          'isGroupAdmin',
          'role',
          'createdAt',
          'lastEditedAt']) &&
        hasOnly([
          'id',
          'email',
          'isGroupAdmin',
          'role',
          'createdAt',
          'lastEditedAt']) &&
        reqData.id is string &&
        reqData.email is string &&
        reqData.isGroupAdmin is bool &&
        reqData.role is list &&
        reqData.createdAt is timestamp &&
        reqData.lastEditedAt is timestamp &&
        canReadVendorGroup(vendorId) &&
        customClaimIsVendorAdmin();
    }
    function canUpdateVendorUser(vendorId, authUserId) {
      let reqData = requestData();
      return (
          (authUid() == authUserId &&
            hasOnlyDiff(['role', 'lastEditedAt'])) ||
          (authUid() != authUserId &&
            hasOnlyDiff(['role', 'lastEditedAt', 'isGroupAdmin']))
        ) &&
        (!hasAll(['role']) || reqData.role is list) &&
        (!hasAll(['isGroupAdmin']) || reqData.isGroupAdmin is bool) &&
        canReadVendorGroup(vendorId) &&
        customClaimIsVendorAdmin();
    }
    function canDeleteVendorUser(vendorId, authUserId) {
      return vendorId == customClaimVendorId() &&
        customClaimIsVendorAdmin() &&
        authUserId != authUid();
    }

    // helper.rules //
    function isAdmin() {
      return request.auth.token.keys().hasAll(['admin']) &&
        request.auth.token.admin;
     }
    // 警告回避のためコメントアウト
    // function isAuthenticated() {
    //   return request.auth != null;
    // }
    // function authEmail() {
    //   return request.auth.token.email;
    // }
    function authUid() {
      return request.auth.uid;
    }
    function customClaimEnterpriseId() {
      return request.auth.token.enterpriseId;
    }
    function equalToCustomClaimEnterpriseId(value) {
      return request.auth.token.enterpriseId == value;
    }
    function customClaimIsEnterpriseAdmin() {
      return request.auth.token.keys().hasAll(['isEnterpriseAdmin']) &&
        request.auth.token.isEnterpriseAdmin;
    }
    // function customClaimIsEnterpriseRole() {
      // return request.auth.token.enterpriseRole;
    // }
    function customClaimVendorId() {
      return request.auth.token.vendorId;
    }
    function equalToCustomClaimVendorId(value) {
      return request.auth.token.vendorId == value;
    }
    function customClaimIsVendorAdmin() {
      return request.auth.token.keys().hasAll(['isVendorAdmin']) &&
        request.auth.token.isVendorAdmin;
    }
    // function customClaimVendorEmails() {
    //   return request.auth.token.vendorEmails;
    // }
    function containedInCustomClaimVendorEmails(value) {
      return value in request.auth.token.vendorEmails;
    }
    // function customClaimIsVendorRole() {
    //   return request.auth.token.vendorRole;
    // }
    function hasAll(keys) {
      return request.resource.data.keys().hasAll(keys);
    }
    function hasOnly(keys) {
      return request.resource.data.keys().hasOnly(keys);
    }
    function hasOnlyDiff(keys) {
      return request.resource.data.diff(resource.data)
        .affectedKeys().hasOnly(keys);
    }
    function requestData() {
      return request.resource.data;
    }
    function resourceData() {
      return resource.data;
    }
  }
}